{"version":3,"sources":["webpack://app/./ImageVault.ClientScript/scripts/imagevault-insert-media/scripts/ts/imagevault-insert-media-base.ts","webpack://app/./ImageVault.ClientScript/scripts/imagevault-insert-media/scripts/ts/imagevault-insert-media.ts","webpack://app/external \"$\"","webpack://app/webpack/bootstrap","webpack://app/webpack/startup"],"names":["config","this","postMessageCallbackReceived","pingOn","readConfig","messageEvent","message","messageReceiver","errorMessage","origin","a","document","createElement","href","imageVaultUiUrl","protocol","hostname","port","test","publishingSource","error","setupCallback","self","containerWindow","postMessage","e","setTimeout","ping","data","debug","beforeClose","close","success","response","JSON","parse","InsertMediaBase","ImageVaultInsertMedia","InsertResponse","MediaConversion","PublishDetails","Config","$dom","iframe","contentWindow","is","window","addEventListener","eventWrapper","evt","attachEvent","setupComplete","body","target","removeEventListener","InsertMedia","openImageVault","formatId","params","encodeURIComponent","mediaUrlBase","uiLang","pageLang","mediaUrl","insertMode","toString","insertMultiple","additionalMetadataIds","publishDetails","text","url","groupId","mediaId","attr","$","fn","extend","imageVaultInsertMedia","get","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"mappings":"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","file":"insertmedia.min.js","sourcesContent":["import { ImageVaultInsertMedia } from \"./imagevault-insert-media\";\r\n\r\n\r\nexport abstract class InsertMediaBase {\r\n    config: ImageVaultInsertMedia.Config;\r\n    postMessageCallbackReceived: boolean;\r\n    pingOn: boolean;\r\n    containerWindow: Window;\r\n    setupComplete: boolean;\r\n    beforeClose: Function;\r\n    constructor(config: ImageVaultInsertMedia.Config) {\r\n\r\n        this.postMessageCallbackReceived = false;\r\n        this.pingOn = false;\r\n        this.readConfig(config);\r\n\r\n    }\r\n    messageEvent(message) {\r\n        this.messageReceiver(message);\r\n    }\r\n    readConfig(config: ImageVaultInsertMedia.Config): void {\r\n        let errorMessage = null;\r\n        if (config.origin == null) {\r\n            const a = document.createElement(\"a\");\r\n            a.href = config.imageVaultUiUrl;\r\n            config.origin = a.protocol + \"//\" + a.hostname;\r\n            //if port is specified and differs from default port, add it\r\n            if (a.port && ((/http:/i.test(a.protocol) && a.port !== \"80\") || (/https:/i.test(a.protocol) && a.port !== \"443\")))\r\n                config.origin += `:${a.port}`;\r\n        }\r\n        if (!config.publishingSource) {\r\n            errorMessage = \"Publish source must be configured\";\r\n        }\r\n\r\n        if (errorMessage != null && config.error)\r\n            config.error(null, errorMessage);\r\n        else if (errorMessage != null)\r\n            throw (errorMessage);\r\n        this.config = config;\r\n    }\r\n    abstract openImageVault(): void;\r\n\r\n    // Initiate the postMessage contact until response is received\r\n    setupCallback() {\r\n        var self = this;\r\n        if (this.postMessageCallbackReceived)\r\n            return true;\r\n\r\n        if (this.containerWindow.postMessage) {\r\n            try {\r\n                this.containerWindow.postMessage(\"init\", this.config.origin);\r\n            } catch (e) { }\r\n            setTimeout(() => { self.setupCallback(); }, 1000);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Ping origin\r\n    ping() {\r\n        var self = this;\r\n        if (!this.pingOn) return;\r\n        if (this.containerWindow.postMessage) {\r\n            try {\r\n                this.containerWindow.postMessage(\"ping\", this.config.origin);\r\n            } catch (e) { }\r\n        }\r\n        setTimeout(() => { self.ping(); }, 1000);\r\n    }\r\n\r\n    // Receive message receiver\r\n    messageReceiver(message: any) {\r\n        var self = this;\r\n\r\n        // Ignore messages not for us.\r\n        if (message.origin !== this.config.origin) {\r\n            if (this.config.error)\r\n                this.config.error(message, \"origin does not match\");\r\n\r\n            return;\r\n        }\r\n\r\n        // Notify setupCallback that communication has been established\r\n        if (message.data === \"initReceived\") {\r\n            this.postMessageCallbackReceived = true;\r\n            this.pingOn = true;\r\n            setTimeout(() => { self.ping(); }, 1000);\r\n\r\n            if (this.config.debug)\r\n                this.config.debug(message);\r\n            return;\r\n        }\r\n\r\n        // Ping response, ignore\r\n        if (message.data === \"pong\") {\r\n            if (this.config.debug)\r\n                this.config.debug(message);\r\n            return;\r\n        }\r\n\r\n        // Indicates that we can close the window\r\n        if (message.data === \"close\") {\r\n            this.pingOn = false;\r\n            if (this.beforeClose)\r\n                this.beforeClose(message);\r\n            if (this.config.close)\r\n                this.config.close(message);\r\n\r\n            return;\r\n        }\r\n\r\n        // All other messages are insert messages\r\n        if (this.config.success) {\r\n            message.response = JSON.parse(message.data);\r\n            this.config.success(message);\r\n        }\r\n    }\r\n}","/**\r\n * @module insertMedia\r\n */\r\n/// <reference path=\"custom.d.ts\" />\r\nimport * as $ from \"jquery\";\r\nimport { InsertMediaBase } from \"./imagevault-insert-media-base\";\r\n\r\n/**\r\n * Extension method for jQuery that opens ImageVault and lets the user select one or multiple media assets.\r\n * \r\n * To open ImageVault, select an iframe using jQuery and invoke the **imageVaultInsertMedia** function and supply it with a \r\n * [configuration](../classes/insertMedia.imagevaultinsertmedia.config.html)\r\n * that atleast contains:\r\n * \r\n * * [url to the ImageVault instance you would like to use](../classes/insertMedia.imagevaultinsertmedia.config.html#imageVaultUiUrl)\r\n * * [language](../classes/insertMedia.imagevaultinsertmedia.config.html#uiLang) that ImageVault should be displayed in\r\n * * [url of the site that the media should be used on](../classes/insertMedia.imagevaultinsertmedia.config.html#publishingSource)\r\n * * [callback function ](../classes/insertMedia.imagevaultinsertmedia.config.html#success) called when the user selects an asset in ImageVault\r\n *\r\n * If you would like a specific format, specify it by suppliying a \r\n * [formatId](../classes/insertMedia.imagevaultinsertmedia.config.html#formatId).\r\n * If not, the user will be prompted with a popup where she can select from the available user formats.\r\n * \r\n * If media should be edited (cropped or resized) before insert, then specify\r\n * [insertMode](../classes/insertMedia.imagevaultinsertmedia.config.html#insertMode) = 1.\r\n * \r\n * To edit existing media in an editor, use\r\n * [mediaUrl](../classes/insertMedia.imagevaultinsertmedia.config.html#mediaUrl) and set it to the url of the media to edit.\r\n * This will open the editor when ImageVault opens.\r\n *\r\n * If you would like to get public urls (that don't need authentication), supply [publishDetails.text](../classes/insertMedia.imagevaultinsertmedia.publishdetails.html#text) and/or [publishDetails.url](../classes/insertMedia.imagevaultinsertmedia.publishdetails.html#url) and enter where the media is to be used.\r\n * \r\n * The [close function](../classes/insertMedia.imagevaultinsertmedia.config.html#close)\r\n * can also come in handy if you run the script in a popup to know when to close it.\r\n * \r\n * The [success](../classes/insertMedia.imagevaultinsertmedia.config.html#success) function is called with a\r\n * [InsertSuccessMessageEvent](../interfaces/insertMedia.imagevaultinsertmedia.insertsuccessmessageevent.html)\r\n * which has a [response](../interfaces/insertMedia.imagevaultinsertmedia.insertsuccessmessageevent.html#response) property\r\n * that contains a [InsertResponse](../classes/insertMedia.imagevaultinsertmedia.insertresponse.html)\r\n * that describes the media that the user selected.\r\n * \r\n * ### Example:\r\n * \r\n *     <script type=\"text/javascript\" src=\"/scripts/jquery-3.1.1.js\"></script>\r\n *     <script type=\"text/javascript\" src=\"/scripts/imagevault-insert-media/scripts/insertmedia.min.js\"></script>\r\n * \r\n *     <script type=\"text/javascript\">\r\n *        $(\"#insertMedia\").imageVaultInsertMedia({\r\n *            imageVaultUiUrl:\"https://myiv.com\",\r\n *            uiLang:\"en\",\r\n *            publishingSource:\"https://mysite.com\",\r\n *            success:function(result){\r\n *              alert(result.response.Id);\r\n *            }\r\n *        });\r\n *     </script>\r\n *     <iframe id=\"insertMedia\"></iframe>\r\n * \r\n * You can <a href=\"/insertmedia\" target=\"_top\">test</a> the different config parameters to test the function.\r\n */\r\nexport module ImageVaultInsertMedia {\r\n    /**\r\n     * Callback used to receive the result from the success method\r\n     */\r\n    export interface IInsertSuccessCallback { (message: InsertSuccessMessageEvent): void };\r\n\r\n    /**\r\n     * Message returned from the Success Callback method\r\n     */\r\n    export interface InsertSuccessMessageEvent extends MessageEvent {\r\n        /**\r\n         * The response from the ImageVault insert operation\r\n         */\r\n        data: string;\r\n        /**\r\n         * The response from the ImageVault insert operation\r\n         */\r\n        response: InsertResponse;\r\n    }\r\n    /**\r\n     * The response from ImageVault when inserting an asset\r\n     */\r\n    export class InsertResponse {\r\n        /**\r\n         * The media item id of the asset \r\n         */\r\n        Id: Number;\r\n        /**\r\n         * The id of the vault where the asset resides\r\n         */\r\n        VaultId: Number;\r\n        /**\r\n         * The name of the asset\r\n         */\r\n        Name: string;\r\n        /**\r\n         * The conversion selected by the user. Is an array but will only contain one object\r\n         */\r\n        MediaConversions: MediaConversion[];\r\n        /**\r\n         * Date when the asset was added to ImageVault\r\n         */\r\n        DateAdded: string;\r\n        /**\r\n         * Name of the user that added the asset to ImageVault\r\n         */\r\n        AddedBy: string;\r\n\r\n    }\r\n\r\n    /**\r\n     * Defines a media asset, original or conversion\r\n     */\r\n    export class MediaConversion {\r\n        /**\r\n         * The url to the conversion\r\n         */\r\n        Url: string;\r\n        /**\r\n         * Name of the conversion\r\n         */\r\n        Name: string;\r\n        /**\r\n         * Html representing the conversion\r\n         */\r\n        Html: string;\r\n        /**\r\n         * Content type of the conversion\r\n         */\r\n        ContentType: string;\r\n        /**\r\n         * Width, in pixels, of the conversion\r\n         */\r\n        Width: number;\r\n        /**\r\n         * Height, in pixels, of the conversion\r\n         */\r\n        Height: number;\r\n        /**\r\n         * Aspect ratio of the conversion\r\n         */\r\n        AspectRatio: number;\r\n        /**\r\n         * Width of the selected/requested format\r\n         */\r\n        FormatWidth: number;\r\n        /**\r\n         * Height of the selected/requested format\r\n         */\r\n        FormatHeight: number;\r\n        /**\r\n         * Aspect ratio of the selected/requested format\r\n         */\r\n        FormatAspectRatio: number;\r\n        /**\r\n         * Name of the media format\r\n         */\r\n        MediaFormatName: string;\r\n        /**\r\n         * Id of the selected media format\r\n         */\r\n        MediaFormatId: number;\r\n    }\r\n    /**\r\n     * Defines where an ImageVault asset is used when requesting it\r\n     */\r\n    export class PublishDetails {\r\n        /**\r\n        * The textual description on where an asset is used\r\n        */\r\n        text: string;\r\n        /**\r\n        * The url to where the asset is used\r\n        */\r\n        url: string;\r\n        /**\r\n        * An optional id for grouping usage\r\n        */\r\n        groupId: string;\r\n    }\r\n\r\n    /** \r\n      * Defines the configuration needed to invoke the insert function\r\n      */\r\n    export class Config {\r\n        /**\r\n         * The url to the ImageVault ui that should be used\r\n         */\r\n        imageVaultUiUrl: string;\r\n        /**\r\n         * [Optional] Origin where the insert function is launched from. Is normally calculated and does not need to be supplied.\r\n         */\r\n        origin: string;\r\n        /**\r\n         * The language that the ImageVault ui should be displayed in\r\n         */\r\n        uiLang: string;\r\n        /**\r\n         * [Optional] The language for the default content in ImageVault\r\n         */\r\n        pageLang: string;\r\n        /**\r\n         * The publishingSource where the image should be used. Normally the url for the site.\r\n         */\r\n        publishingSource: string;\r\n        /**\r\n         * If it should be possible to select multiple assets from ImageVault. Default is false.\r\n         */\r\n        insertMultiple: boolean;\r\n        /**\r\n         * The url base that the media assets should use. Supply the url to a cdn.\r\n         */\r\n        mediaUrlBase: string;\r\n        /**\r\n         * The ids of the formats that the selection should result in. \r\n         */\r\n        formatId: string;\r\n        /**\r\n         * [Optional] The comma-separated id-list of additional metadata definitions that the selection should result in. \r\n         */\r\n        additionalMetadataIds: string;\r\n        /**\r\n         * The publishDetails to use. If supplied, published urls are returned.\r\n         */\r\n        publishDetails: PublishDetails;\r\n        /**\r\n         * Function that is invoked when the user insert items from ImageVault\r\n         */\r\n        success: IInsertSuccessCallback;\r\n        /**\r\n         * This function is called when the Insert window should be closed\r\n         */\r\n        close: Function;\r\n        /**\r\n       * [Optional] This function is called whenever an error is encountered\r\n       */\r\n        error: Function;\r\n        /**\r\n         * [Optional] Listen on this method for debug messages\r\n         */\r\n        debug: Function;\r\n\r\n        /**\r\n         * [Optional] Set media url to edit existing media\r\n         */\r\n        mediaUrl: string;\r\n        /**\r\n         * [Optional] Set media id to show specific media\r\n         */\r\n        mediaId: number;\r\n\r\n        /**\r\n         * [Optional]\r\n         * @0 (Default) Insert with format or choose format from dropdown in ImageVault UI\r\n         * @1 Same as 0 (default) except that you can edit media in editor before insert\r\n         */\r\n        insertMode: number;\r\n    }\r\n    export class InsertMedia extends InsertMediaBase {\r\n        $dom: JQuery;\r\n        constructor($dom: JQuery, config: Config) {\r\n            super(config);\r\n            this.$dom = $dom;\r\n            var iframe = (this.$dom[0] as HTMLIFrameElement);\r\n            this.containerWindow = iframe.contentWindow;\r\n\r\n            // Validate configuration\r\n            if (!$dom.is(\"iframe\")) {\r\n                throw \"The jQuery element must be an iframe\";\r\n            }\r\n            \r\n            var self = this;\r\n\r\n            window.addEventListener(\"load\", () => {\r\n                // Listen for postMessage messages\r\n                let eventWrapper = (evt) => self.messageEvent(evt);\r\n\r\n                if (window.addEventListener) {\r\n                    window.addEventListener(\"message\", eventWrapper, false);\r\n                } else if (window.attachEvent) {\r\n                    window.attachEvent(\"message\", (message: any) => { self.messageReceiver(message); });\r\n                } else {\r\n                    throw \"Cannot attachEvent/addEventListener, not supported by browser\";\r\n                }\r\n                self.setupCallback();\r\n                self.setupComplete = true;\r\n\r\n                // Remove event listeners when iframe is removed\r\n                document.body.addEventListener(\"DOMNodeRemoved\", function (evt) {\r\n                    var removedNode = evt.target;\r\n                    if (removedNode == iframe && window.removeEventListener) {\r\n                        window.removeEventListener(\"message\", eventWrapper, false);\r\n                        window.removeEventListener(\"message\", eventWrapper, true);\r\n\r\n                    }\r\n                }, false);\r\n            });\r\n        }\r\n        openImageVault(): void {\r\n            const config = this.config;\r\n            //formatId must be provided to clear format in IV<5.5\r\n            if (!config.formatId) {\r\n                config.formatId = \"0\";\r\n            }\r\n\r\n            let params = `mediaurlbase=${encodeURIComponent(config.mediaUrlBase)}&ensurepublishingsource=${encodeURIComponent(config.publishingSource)}` +\r\n                (config.uiLang ? `&uiLang=${encodeURIComponent(config.uiLang)}` : \"\") +\r\n                (config.pageLang ? `&pagelang=${encodeURIComponent(config.pageLang)}` : \"\") +\r\n                (config.mediaUrl ? `&mediaUrl=${encodeURIComponent(config.mediaUrl)}` : \"\") +\r\n                (config.insertMode ? `&insertMode=${encodeURIComponent(config.insertMode.toString())}` : \"\") +\r\n                (config.insertMultiple ? `&insertmultiple=${encodeURIComponent(config.insertMultiple.toString())}` : \"\") +\r\n                `&formatId=${config.formatId.toString()}` +\r\n                (config.additionalMetadataIds ? `&additionalMetadataIds=${encodeURIComponent(config.additionalMetadataIds.toString())}` : \"\");\r\n\r\n\r\n            const publishDetails = config.publishDetails;\r\n            if (publishDetails) {\r\n                params += (publishDetails.text ? `&publishdetails.Text=${encodeURIComponent(publishDetails.text)}` : \"\") +\r\n                    (publishDetails.url ? `&publishdetails.Url=${encodeURIComponent(publishDetails.url)}` : \"\") +\r\n                    (publishDetails.groupId ? `&publishdetails.GroupId=${encodeURIComponent(publishDetails.groupId)}` : \"\");\r\n            }\r\n            params += config.mediaId ? `#search=${config.mediaId}` + \"&items=\" + config.mediaId : \"#\";\r\n\r\n            // Set src of iframe \r\n            this.$dom.attr(\"src\", this.config.imageVaultUiUrl + \"?\" + params);\r\n            if (this.setupComplete) {\r\n                this.postMessageCallbackReceived = false;\r\n                this.setupCallback();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n$.fn.extend({\r\n    imageVaultInsertMedia(config: ImageVaultInsertMedia.Config) {\r\n\r\n        const e = this.get(0);\r\n        if (e.imageVaultInsertMedia) {\r\n            e.imageVaultInsertMedia.readConfig(config);\r\n        } else {\r\n            e.imageVaultInsertMedia = new ImageVaultInsertMedia.InsertMedia(this, config);\r\n        }\r\n        e.imageVaultInsertMedia.openImageVault();\r\n\r\n        return true;\r\n    }\r\n});","module.exports = $;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(902);\n"],"sourceRoot":""}